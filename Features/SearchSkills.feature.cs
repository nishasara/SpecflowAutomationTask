// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.7.0.0
//      SpecFlow Generator Version:3.7.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SkillSwapSpecflow.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.7.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("SearchSkills")]
    public partial class SearchSkillsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "SearchSkills.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "SearchSkills", "Users should be able to Search skills based on either Skillsname or Usrename in t" +
                    "he SKillSwap", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("I should be able to search skills using the Search feature to view the services a" +
            "vailable in SkillSwap")]
        [NUnit.Framework.CategoryAttribute("automation")]
        [NUnit.Framework.TestCaseAttribute("zaara6.susan@gmail.com", "12345678", "Valid Username and Valid Password", "Western Music", "Online", null)]
        [NUnit.Framework.TestCaseAttribute("zaara6.susan@gmail.com", "12345678", "Valid Username and Valid Password", "Western Music", "On-Site", null)]
        [NUnit.Framework.TestCaseAttribute("zaara6.susan@gmail.com", "12345678", "Valid Username and Valid Password", "Western Music", "ShowAll", null)]
        public virtual void IShouldBeAbleToSearchSkillsUsingTheSearchFeatureToViewTheServicesAvailableInSkillSwap(string emailAddress, string password, string credentialType, string skill, string locationType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "automation"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("EmailAddress", emailAddress);
            argumentsOfScenario.Add("Password", password);
            argumentsOfScenario.Add("CredentialType", credentialType);
            argumentsOfScenario.Add("Skill", skill);
            argumentsOfScenario.Add("LocationType", locationType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I should be able to search skills using the Search feature to view the services a" +
                    "vailable in SkillSwap", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
   testRunner.Given(string.Format("I log into SkillSwap with {0}, {1} as Email, {2} as Password", credentialType, emailAddress, password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 7
     testRunner.And("I successfully navigate to my home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 8
    testRunner.When(string.Format("I search for the {0} using Search feature available in Home Page", skill), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 9
     testRunner.And(string.Format("I apply filter for location type as {0} on the search results", locationType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 10
     testRunner.Then(string.Format("I should be able to view only results for {0} with location Type as {1}", skill, locationType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("I should be able to search skills using the username to view the services availab" +
            "le in SkillSwap")]
        [NUnit.Framework.CategoryAttribute("automation")]
        [NUnit.Framework.TestCaseAttribute("zaara6.susan@gmail.com", "12345678", "Valid Username and Valid Password", "Zaara1 Susan", "Online", null)]
        [NUnit.Framework.TestCaseAttribute("zaara6.susan@gmail.com", "12345678", "Valid Username and Valid Password", "Zaara1 Susan", "On-Site", null)]
        [NUnit.Framework.TestCaseAttribute("zaara6.susan@gmail.com", "12345678", "Valid Username and Valid Password", "Zaara1 Susan", "ShowAll", null)]
        public virtual void IShouldBeAbleToSearchSkillsUsingTheUsernameToViewTheServicesAvailableInSkillSwap(string emailAddress, string password, string credentialType, string username, string locationType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "automation"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("EmailAddress", emailAddress);
            argumentsOfScenario.Add("Password", password);
            argumentsOfScenario.Add("CredentialType", credentialType);
            argumentsOfScenario.Add("Username", username);
            argumentsOfScenario.Add("LocationType", locationType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I should be able to search skills using the username to view the services availab" +
                    "le in SkillSwap", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 19
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 20
   testRunner.Given(string.Format("I log into SkillSwap with {0}, {1} as Email, {2} as Password", credentialType, emailAddress, password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 21
     testRunner.And("I successfully navigate to my home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 22
    testRunner.When(string.Format("I search for user as {0} using Search feature", username), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 23
     testRunner.And(string.Format("I apply filter for location type as {0} on the search results with username", locationType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 24
     testRunner.Then(string.Format("I should be able to view results for the skills listed by the {0} with location T" +
                            "ype as {1}", username, locationType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
